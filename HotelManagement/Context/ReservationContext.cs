// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Configuration;
using Lab15.Entities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;

namespace Lab15.Context;

public partial class ReservationContext : DbContext
{
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder.UseSqlServer(ConfigurationManager.ConnectionStrings["FRONTEND_RESERVATION2"].ConnectionString);


    public virtual DbSet<Reservation> Reservations { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Reservation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tmp_ms_x__3214EC070939E04D");

            entity.ToTable("reservation");

            entity.Property(e => e.AptSuite)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("apt_suite");
            entity.Property(e => e.ArrivalTime)
                .HasColumnType("date")
                .HasColumnName("arrival_time");
            entity.Property(e => e.BirthDay)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("birth_day");
            entity.Property(e => e.BreakFast).HasColumnName("break_fast");
            entity.Property(e => e.CardCvc)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("card_cvc");
            entity.Property(e => e.CardExp)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("card_exp");
            entity.Property(e => e.CardNumber)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("card_number");
            entity.Property(e => e.CardType)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("card_type");
            entity.Property(e => e.CheckIn).HasColumnName("check_in");
            entity.Property(e => e.City)
                .IsRequired()
                .HasColumnName("city");
            entity.Property(e => e.Cleaning).HasColumnName("cleaning");
            entity.Property(e => e.Dinner).HasColumnName("dinner");
            entity.Property(e => e.EmailAddress)
                .IsRequired()
                .HasColumnName("email_address");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("first_name");
            entity.Property(e => e.FoodBill).HasColumnName("food_bill");
            entity.Property(e => e.Gender)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("gender");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("last_name");
            entity.Property(e => e.LeavingTime)
                .HasColumnType("date")
                .HasColumnName("leaving_time");
            entity.Property(e => e.Lunch).HasColumnName("lunch");
            entity.Property(e => e.NumberGuest).HasColumnName("number_guest");
            entity.Property(e => e.PaymentType)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("payment_type");
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("phone_number");
            entity.Property(e => e.RoomFloor)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("room_floor");
            entity.Property(e => e.RoomNumber)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("room_number");
            entity.Property(e => e.RoomType)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("room_type");
            entity.Property(e => e.SSurprise).HasColumnName("s_surprise");
            entity.Property(e => e.State)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("state");
            entity.Property(e => e.StreetAddress)
                .IsRequired()
                .HasColumnName("street_address");
            entity.Property(e => e.SupplyStatus).HasColumnName("supply_status");
            entity.Property(e => e.TotalBill).HasColumnName("total_bill");
            entity.Property(e => e.Towel).HasColumnName("towel");
            entity.Property(e => e.ZipCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("zip_code");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);


    public List<Reservation> SearchReservation(int? id = null, string fname = null)
    {
        var parameters = new[]
        {
            new SqlParameter("@id", id ?? (object)DBNull.Value),
            new SqlParameter("@fname", fname ?? (object)DBNull.Value)
        };

        //return Reservations
        //    .FromSqlRaw($"EXEC SearchReservation @id, @fname", parameters)
        //    .ToList();

        return Database.SqlQueryRaw<Reservation>($"exec SearchReservation @id, @fname", parameters)
            .ToList();
    }


    public record ReservationRecord(
    int Id,
    string first_name,
    string last_name,
    string birth_day,
    string gender,
    string phone_number,
    string email_address,
    int number_guest,
    string street_address,
    string apt_suite,
    string city,
    string state,
    string zip_code,
    string room_type,
    string room_floor,
    string room_number,
    double total_bill,
    string payment_type,
    string card_type,
    string card_number,
    string card_exp,
    string card_cvc,
    DateTime arrival_time,
    DateTime leaving_time,
    bool check_in,
    int break_fast,
    int lunch,
    int dinner,
    bool cleaning,
    bool towel,
    bool s_surprise,
    bool supply_status,
    int food_bill
);

    public List<ReservationRecord> TestProc()
    {
        return Database.SqlQueryRaw<ReservationRecord>($"EXEC TestProc").ToList(); // Unmapped types (e.g., records, DTOs).
        //return Reservations.FromSqlRaw($"EXEC TestProc").ToList(); // Tracked Entities
    }


    public record ReservedRoomDto
    {
        public int Id { get; init; }
        public string FullName { get; init; }

        [Column("room_number")]
        public string RoomNumber { get; init; }

        [Column("Room_Type")]
        public string RoomType { get; init; }

        [Column("Phone_Number")]
        public string PhoneNumber { get; init; }

        [Column("Arrival_Time")]
        public DateTime ArrivalTime { get; init; }

        [Column("Leaving_Time")]
        public DateTime LeavingTime { get; init; }
    }
    public async Task<List<ReservedRoomDto>> RservedRooms()
    {
        return await Database.SqlQueryRaw<ReservedRoomDto>($"EXEC RservedRooms")
            .ToListAsync();
    }

    public record OccupiedRoomDto
    {
        public int Id { get; init; }
        public string FullName { get; init; }

        [Column("room_number")]
        public string RoomNumber { get; init; }

        [Column("Room_Type")]
        public string RoomType { get; init; }

        [Column("Phone_Number")]
        public string PhoneNumber { get; init; }
    }
    public async Task<List<OccupiedRoomDto>> OccupiedRooms()
    {
        return await Database.SqlQueryRaw<OccupiedRoomDto>($"EXEC OccupiedRooms")
            .ToListAsync();
    }

}